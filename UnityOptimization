                                                     UNITY OPTIMIZATION
                                                    ********************
							

   UI OPTIMIZATION
  *****************

	-Have multiple Canvases(e.g., static and dynamic)
	-Can turn off the Canvases(do not set them false, instead set the canvas and raycaster component false and for child script components set this.enabled = false, to avoid callbacks) that are not used
	-Disable raycast for objects that not require click
	-Avoid Layout groups, if possible
	-Break UI into smaller components
	-Use static batching
	-Use occulsion culling
	-Bake lights
	-Change active state of childerns before changing the parent
	-Avoid animators if possible
	-Check prebake collision meshes and loaded shaders to cut loading time
	-Avoid complicated meshes and colliders
	-As strings are reference type and immutable, try to break the UI part into the header and content type, so only content type changes


 CODE OPTIMIZATION
*******************
	-Avoid Global classes that contain all the variable references
	-Cache References in awake/start
	-Use Object Pooling
	-Avoid .Find() and other expensive functions
	-Use Addressables
	-Avoid Garbage Collection
	-Use Events to avoid unnecessary references
	-Use Singleton pattern
	-Use State based pattern
	-Use Interfaces and Abstract classes
	-For Updates and similar callbacks, compare the previous state of the varible to trigger a change
	-Try to clear lists and arrays, before repopulting them
	-Avoid Debugs from production releases
	-Use StringBuilder Class to avoid Garbage Collection
	-Avoid Boxing(Boxing is the term for what happens when a value-typed variable is used inplace of a reference-typed variable. Boxing usually occurs when we pass value-typed variables, such as ints or floats, to a function with object parameters such as Object.Equals().)
	-From Coroutines, avoid new in every iteration, cache the value and pass it
	-LINQ and Regular Expressions can create GC, due to boxing
	-For forcefully trigger GC call System.GC.Collect() ( GC.Collect(), Resources.UnloadUnusedAssets())
	
	
	
	                                                    TIPS 
                                                    ********************
						    
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	One possible, but hacky, workaround is to place the UI to be shown/hidden onto its own Canvas or Sub-canvas and then to merely enable/disable the Canvas component on this object.
	This will cause the UI’s meshes to not be drawn, but they will remain resident in memory and their original batching will be preserved. Further, no OnEnable or OnDisable callbacks will be invoked in the UI’s hierarchy.
	Note, however, that this will not disable any MonoBehaviours within the hidden UI, and so these MonoBehaviours will still receive Unity lifecycle callbacks, such as Update.
	To avoid this issue, MonoBehaviours on UIs that will be disabled in this manner should not directly implement Unity’s lifecycle callbacks, but should instead receive their callbacks from a “Callback Manager” MonoBehaviour on the UI’s root GameObject. This “Callback Manager” can be informed whenever the UI is shown/hidden,
	and can ensure that lifecycle events are propagated or not propagated as necessary.
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Another interesting fact is that if you want to turn off a Canvas group; turning off the Canvas component within the Canvas game object is more efficient than turning off the entire Canvas game object.
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Unity also suggests us to avoid using Layout Groups if possible, as it will be using GetComponents call.
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	In general, the UI Text component's Best Fit setting should never be used.
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	All approaches can be improved by adding a RectMask2D component to the Scroll View
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	unused scripts and methods are bag of load for your project and you should eliminate them.
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
						 GENERAL CLEAN CODE PRACTICES
		     			       ********************************

	-Name variables properly
		nameOfVariable,
		_privateMember,
		CONSTANT_VARIABLE or PROPERT_VARIABLE

	-Avoid logs in releases

	-Avoid Side-effects in functions
	If a function is authenticating the user, it should not initialize the values, it should just return if user is authenticated or not.

	-Write smaller functions
  
	-Reuse Code

	-Use classes, inheritance(subset relationships) and composition(connection but not subsets) in js

	- S(Single-responsibility Principle)
	classes or functions should avoid side-effects and should only do one task.
	
	- O(Open-closed Principle)
	classes are open to extend but closed to change properties, directly

	- L(Liskov Substitution Principle)
	Objects of subclasses to behave the same way as the objects of superclass(should get the correct output for variations)
	
	- I(Interface Segregation Principle)
 	Client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use(incase of interface, break the interface so that classes could implement them accourdingly without implementing non requiring things)

	- D(Dependency Inversion Principle)
	Avoid tight coupling between High-level modules and  low-level modules. Both should depend on abstractions (for example, interfaces)

	
	
	
	
	
